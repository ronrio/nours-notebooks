# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_probablistic_state_estimation.ipynb.

# %% auto 0
__all__ = ['DDist', 'JDist']

# %% ../nbs/01_probablistic_state_estimation.ipynb 3
class DDist:
    def __init__(self, dictionary:dict) -> None:
        self.d = dictionary
    def prob(self, elt # an element of the domain of this distribution
             ) -> float:
        if elt in self.d:
            return self.d[elt]
        else:
            return 0
    def support(self):
        return [k for k in self.d.keys() if self.prob(k) > 0]
    @property
    def dist(self):
        return self.d
    def draw(self):
        r = random.random()
        sum = 0.0
        for val in self.support():
            sum += self.prob(val)
            if r < sum:
                return val

# %% ../nbs/01_probablistic_state_estimation.ipynb 10
# Calculate the join distribution probabilities.
class JDist(DDist):
    def __init__(self, PA:DDist # P(A)
                 ,PBgA:callable # condtional probability P(B|A)
                 ) -> DDist:
        PAB = dict()
        for a in PA.dist.keys():
            PBgA_a = PBgA(a)
            for b in PBgA_a.dist.keys():
                PAB[(a,b)] = PA.prob(a) * PBgA_a.prob(b)
        self.d = PAB
    def marginalizeOut(self, 
                       idx:int # which random variable ..?
                       ) -> DDist:
        # A = a
        symbolKeys = self.d.keys()
        for key in symbolKeys:
            s = key[idx]
            
        return
    
